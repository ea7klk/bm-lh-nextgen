name: Docker Build and Push

on:
  push:
    tags:
      - 'v*'
      - 'v*.*'
      - 'v*.*.*'
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-latest: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    permissions:
      contents: read
      packages: write
      security-events: write  # Required for SARIF upload
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify registry access
      run: |
        echo "Logged in as: ${{ github.actor }}"
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Image will be: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      if: startsWith(github.ref, 'refs/tags/')

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' }}

    - name: Debug metadata
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        platforms: linux/amd64,linux/arm64

    - name: Verify push result
      run: |
        echo "Build completed. Checking if images were pushed..."
        echo "Image tags that should be available:"
        echo "${{ steps.meta.outputs.tags }}"

    - name: Summary
      run: |
        echo "## üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.get_version.outputs.VERSION || 'latest' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Tags Built:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Pull Command:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION || 'latest' }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Docker container for testing
      run: |
        # Use the latest tag for testing since it's always available
        echo "Testing with image: ${{ needs.build-and-push.outputs.image-latest }}"
        
        docker run -d --name bm-lh-test \
          -p 3000:3000 \
          -e ADMIN_PASSWORD=test123 \
          -e JWT_SECRET=test-secret-for-ci \
          "${{ needs.build-and-push.outputs.image-latest }}"

    - name: Wait for container to be ready
      run: |
        echo "Waiting for container to start..."
        sleep 10
        
        # Wait up to 60 seconds for health check
        for i in {1..12}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Container is healthy!"
            break
          fi
          echo "‚è≥ Waiting for container... ($i/12)"
          sleep 5
        done

    - name: Test application endpoints
      run: |
        echo "Testing health endpoint..."
        curl -f http://localhost:3000/health || exit 1
        
        echo "Testing frontend..."
        curl -f http://localhost:3000/ || exit 1
        
        echo "Testing public API endpoints..."
        curl -f http://localhost:3000/public/lastheard || exit 1
        curl -f http://localhost:3000/public/continents || exit 1

    - name: Cleanup test container
      if: always()
      run: |
        docker stop bm-lh-test || true
        docker rm bm-lh-test || true