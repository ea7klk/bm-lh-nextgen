name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: bm_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: bm_lastheard
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint --if-present

    - name: Run tests
      run: npm test --if-present

    - name: Check Docker build
      run: docker build -t bm-lh-nextgen-ci .

    - name: Start PostgreSQL for Docker test
      run: |
        # Create a Docker network
        docker network create ci-network
        
        # Start PostgreSQL container
        docker run -d --name postgres-test \
          --network ci-network \
          -e POSTGRES_USER=bm_lastheard \
          -e POSTGRES_PASSWORD=test_password \
          -e POSTGRES_DB=bm_lastheard \
          -p 5433:5432 \
          postgres:16-alpine
        
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if docker exec postgres-test pg_isready -U bm_lastheard > /dev/null 2>&1; then
            echo "✅ PostgreSQL is ready"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: Test Docker container
      run: |
        # Start container in background with PostgreSQL connection
        docker run -d --name bm-lh-ci-test \
          --network ci-network \
          -p 3001:3000 \
          -e DB_HOST=postgres-test \
          -e DB_PORT=5432 \
          -e DB_USER=bm_lastheard \
          -e DB_PASSWORD=test_password \
          -e DB_NAME=bm_lastheard \
          -e ADMIN_PASSWORD=test123 \
          -e JWT_SECRET=test-secret-for-ci \
          bm-lh-nextgen-ci

        # Wait for container to be ready
        echo "Waiting for application to start..."
        sleep 15
        
        # Check container logs
        echo "Container logs:"
        docker logs bm-lh-ci-test
        
        # Test health endpoint
        for i in {1..12}; do
          if curl -f http://localhost:3001/health > /dev/null 2>&1; then
            echo "✅ Container health check passed"
            break
          fi
          echo "⏳ Waiting for container... ($i/12)"
          sleep 5
        done
        
        # Final health check
        curl -f http://localhost:3001/health || (docker logs bm-lh-ci-test && exit 1)
        
        # Test frontend
        curl -f http://localhost:3001/ > /dev/null || (docker logs bm-lh-ci-test && exit 1)

    - name: Cleanup
      if: always()
      run: |
        docker stop bm-lh-ci-test || true
        docker rm bm-lh-ci-test || true
        docker stop postgres-test || true
        docker rm postgres-test || true
        docker network rm ci-network || true
        docker rmi bm-lh-nextgen-ci || true

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true